{"filter":false,"title":"user.js","tooltip":"/api/user.js","undoManager":{"mark":13,"position":13,"stack":[[{"start":{"row":0,"column":0},"end":{"row":173,"column":0},"action":"insert","lines":["var express = require('express');","var router = express.Router();","var passport = require('passport');","var LocalStrategy = require('passport-local').Strategy;","var OAuth2Strategy = require('passport-oauth').OAuth2Strategy;","var VKontakteStrategy = require('passport-vkontakte').Strategy;","//var IfmoSSOStrategy = require('passport-ifmosso').Strategy;","var config = require('nconf');","var choose_exam = require('./exam').choose_exam;","var create_verify = require('./exam').create_verify;","var profile = require('../db/dao/profile');","var logger = require('../common/logger');","","function checkRole(req, res, next, role) {","    if (req.isAuthenticated()) {","        if (!role || req.user.role >= role) next();","        else res.status(403).end();","    }","    else {","        res.status(401).end();","    }","}","","router.isAuth = function(req, res, next) {","    checkRole(req, res, next);","};","router.isStudent = function(req, res, next) {","    checkRole(req, res, next, 1);","};","router.isInspector = function(req, res, next) {","    checkRole(req, res, next, 2);","};","router.isAdministrator = function(req, res, next) {","    checkRole(req, res, next, 3);","};","router.isMyself = function(req, res, next) {","    if (req.params.userId === req.user._id) next();","    else res.status(403).end();","};","router.logUserIP = function(req, res, next) {","    if (req.isAuthenticated()) {","        logger.info('User \"' + req.user.username + '\" logged in from IP ' + req.ip);","    }","    next();","};","","passport.serializeUser(function(user, done) {","    done(null, user);","});","passport.deserializeUser(function(user, done) {","    done(null, user);","});","","// Local strategy","// Авторизация","passport.use('local', new LocalStrategy(profile.auth.local));","router.post('/', passport.authenticate('local', {","    failureRedirect: '/#login'","}), router.logUserIP, choose_exam, create_verify, function(req, res, next) {","    res.json(req.user);","});","","","// IfmoSSO strategy","//passport.use('ifmosso', new IfmoSSOStrategy({","//    secretKey: config.get('auth:ifmosso:secretKey')","//}, profile.auth.ifmosso));","//router.post('/ifmosso/callback', passport.authenticate('ifmosso', {","//    failureRedirect: '/#login'","//}), router.logUserIP, function(req, res, next) {","//    res.redirect('/');","//});","","","passport.use('vk', new VKontakteStrategy({","        clientID: config.get('auth:vk:clientID'), // VK.com docs call it 'API ID', 'app_id', 'api_id', 'client_id' or 'apiId' ","        clientSecret: config.get('auth:vk:clientSecret'),","        callbackURL: config.get('auth:vk:callbackURL')","    },","    function(accessToken, refreshToken, params, data, done) {","        // console.log(params.email); // getting the email ","        try {","            console.log(data)","            profile.auth.vk(data, done);","        }","        catch (e) {","            done(e);","        }","    }","));","","router.get('/vk', passport.authenticate('vk'));","router.get('/vk/callback', passport.authenticate('vk', {","    failureRedirect: '/#login'","}), router.logUserIP, function(req, res, next) {","    res.redirect('/');","});","","// OAuth2 strategy (openedu)","passport.use('openedu', new OAuth2Strategy({","    authorizationURL: config.get('auth:openedu:authorizationURL'),","    tokenURL: config.get('auth:openedu:tokenURL'),","    clientID: config.get('auth:openedu:clientID'),","    clientSecret: config.get('auth:openedu:clientSecret'),","    callbackURL: config.get('auth:openedu:callbackURL')","}, function(accessToken, refreshToken, prof, done) {","    var userProfileURL = config.get('auth:openedu:userProfileURL');","    this._oauth2._useAuthorizationHeaderForGET = true;","    this._oauth2.get(userProfileURL, accessToken, function(err, body, res) {","        if (err) {","            var InternalOAuthError = require('passport-oauth').InternalOAuthError;","            return done(new InternalOAuthError('failed to fetch user profile', err));","        }","        try {","            profile.auth.openedu(JSON.parse(body), done);","        }","        catch (e) {","            done(e);","        }","    });","}));","router.get('/openedu', passport.authenticate('openedu'));","router.get('/openedu/callback', passport.authenticate('openedu', {","    failureRedirect: '/#login'","}), router.logUserIP, function(req, res, next) {","    res.redirect('/');","});","","// Get user profile","router.get('/', function(req, res) {","    req.isAuthenticated() ? res.json(req.user) : res.status(401).end();","});","// User logout","router.delete('/:userId', function(req, res) {","    req.logout();","    res.json({});","});","// Get user profile by id","router.get('/:userId', router.isMyself, function(req, res) {","    var args = {","        userId: req.params.userId","    };","    profile.get(args, function(err, data) {","        if (!err && data) {","            res.json(data);","        }","        else {","            res.status(400).end();","        }","    });","});","","// Update user profile and session by id","router.put('/:userId', router.isMyself, function(req, res) {","    var args = {","        userId: req.params.userId,","        data: req.body","    };","    profile.update(args, function(err, data) {","        if (!err && data) {","            /*req.login(data, function(error) {","                if (error) res.status(400).end();","                else res.json(data);","            });*/","            res.json(data);","        }","        else {","            res.status(400).end();","        }","    });","});","","module.exports = router;",""],"id":1}],[{"start":{"row":61,"column":0},"end":{"row":72,"column":0},"action":"remove","lines":["","","// IfmoSSO strategy","//passport.use('ifmosso', new IfmoSSOStrategy({","//    secretKey: config.get('auth:ifmosso:secretKey')","//}, profile.auth.ifmosso));","//router.post('/ifmosso/callback', passport.authenticate('ifmosso', {","//    failureRedirect: '/#login'","//}), router.logUserIP, function(req, res, next) {","//    res.redirect('/');","//});",""],"id":2}],[{"start":{"row":60,"column":3},"end":{"row":61,"column":0},"action":"remove","lines":["",""],"id":3}],[{"start":{"row":7,"column":30},"end":{"row":9,"column":52},"action":"remove","lines":["","var choose_exam = require('./exam').choose_exam;","var create_verify = require('./exam').create_verify;"],"id":4}],[{"start":{"row":8,"column":33},"end":{"row":8,"column":40},"action":"remove","lines":["profile"],"id":5},{"start":{"row":8,"column":33},"end":{"row":8,"column":34},"action":"insert","lines":["u"]}],[{"start":{"row":8,"column":34},"end":{"row":8,"column":35},"action":"insert","lines":["s"],"id":6}],[{"start":{"row":8,"column":35},"end":{"row":8,"column":36},"action":"insert","lines":["e"],"id":7}],[{"start":{"row":8,"column":36},"end":{"row":8,"column":37},"action":"insert","lines":["r"],"id":8}],[{"start":{"row":56,"column":22},"end":{"row":56,"column":33},"action":"remove","lines":["choose_exam"],"id":9}],[{"start":{"row":56,"column":22},"end":{"row":56,"column":37},"action":"remove","lines":[", create_verify"],"id":10}],[{"start":{"row":56,"column":21},"end":{"row":56,"column":22},"action":"remove","lines":[" "],"id":11}],[{"start":{"row":56,"column":20},"end":{"row":56,"column":21},"action":"remove","lines":[","],"id":12}],[{"start":{"row":83,"column":0},"end":{"row":106,"column":4},"action":"remove","lines":["","// OAuth2 strategy (openedu)","passport.use('openedu', new OAuth2Strategy({","    authorizationURL: config.get('auth:openedu:authorizationURL'),","    tokenURL: config.get('auth:openedu:tokenURL'),","    clientID: config.get('auth:openedu:clientID'),","    clientSecret: config.get('auth:openedu:clientSecret'),","    callbackURL: config.get('auth:openedu:callbackURL')","}, function(accessToken, refreshToken, prof, done) {","    var userProfileURL = config.get('auth:openedu:userProfileURL');","    this._oauth2._useAuthorizationHeaderForGET = true;","    this._oauth2.get(userProfileURL, accessToken, function(err, body, res) {","        if (err) {","            var InternalOAuthError = require('passport-oauth').InternalOAuthError;","            return done(new InternalOAuthError('failed to fetch user profile', err));","        }","        try {","            profile.auth.openedu(JSON.parse(body), done);","        }","        catch (e) {","            done(e);","        }","    });","}));"],"id":13}],[{"start":{"row":83,"column":0},"end":{"row":90,"column":0},"action":"remove","lines":["","router.get('/openedu', passport.authenticate('openedu'));","router.get('/openedu/callback', passport.authenticate('openedu', {","    failureRedirect: '/#login'","}), router.logUserIP, function(req, res, next) {","    res.redirect('/');","});",""],"id":14}]]},"ace":{"folds":[],"scrolltop":1317.5,"scrollleft":0,"selection":{"start":{"row":83,"column":0},"end":{"row":83,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1486246072073,"hash":"b370cb159c8f9fa4f3c19a16ad185ecf9200b8ea"}