{"filter":false,"title":"index.js","tooltip":"/db/index.js","undoManager":{"mark":77,"position":77,"stack":[[{"start":{"row":0,"column":0},"end":{"row":0,"column":35},"action":"insert","lines":["var mongoose = require('mongoose');"],"id":1}],[{"start":{"row":0,"column":35},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":2}],[{"start":{"row":1,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["",""],"id":3}],[{"start":{"row":2,"column":0},"end":{"row":4,"column":36},"action":"insert","lines":["mongoose.connect(config.get('mongoose:uri'));","var conn = mongoose.connection;","var Grid = require('gridfs-stream');"],"id":4}],[{"start":{"row":4,"column":36},"end":{"row":5,"column":0},"action":"insert","lines":["",""],"id":6}],[{"start":{"row":5,"column":0},"end":{"row":7,"column":31},"action":"insert","lines":["var fs = require('fs');","var path = require('path');","var crypto = require('crypto');"],"id":7}],[{"start":{"row":7,"column":31},"end":{"row":8,"column":0},"action":"insert","lines":["",""],"id":8}],[{"start":{"row":8,"column":0},"end":{"row":9,"column":0},"action":"insert","lines":["",""],"id":9}],[{"start":{"row":9,"column":0},"end":{"row":9,"column":1},"action":"insert","lines":["v"],"id":10}],[{"start":{"row":9,"column":1},"end":{"row":9,"column":2},"action":"insert","lines":["a"],"id":11}],[{"start":{"row":9,"column":2},"end":{"row":9,"column":3},"action":"insert","lines":["r"],"id":12}],[{"start":{"row":9,"column":3},"end":{"row":9,"column":4},"action":"insert","lines":[" "],"id":13}],[{"start":{"row":9,"column":4},"end":{"row":9,"column":5},"action":"insert","lines":["d"],"id":14}],[{"start":{"row":9,"column":5},"end":{"row":9,"column":6},"action":"insert","lines":["b"],"id":15}],[{"start":{"row":9,"column":6},"end":{"row":9,"column":7},"action":"insert","lines":[" "],"id":16}],[{"start":{"row":9,"column":7},"end":{"row":9,"column":8},"action":"insert","lines":["="],"id":17}],[{"start":{"row":9,"column":8},"end":{"row":9,"column":9},"action":"insert","lines":[" "],"id":18}],[{"start":{"row":9,"column":9},"end":{"row":9,"column":10},"action":"insert","lines":["{"],"id":19}],[{"start":{"row":9,"column":10},"end":{"row":9,"column":11},"action":"insert","lines":["]"],"id":20}],[{"start":{"row":9,"column":10},"end":{"row":9,"column":11},"action":"remove","lines":["]"],"id":21}],[{"start":{"row":9,"column":10},"end":{"row":9,"column":11},"action":"insert","lines":["}"],"id":22}],[{"start":{"row":9,"column":11},"end":{"row":9,"column":12},"action":"insert","lines":[";"],"id":23}],[{"start":{"row":9,"column":10},"end":{"row":11,"column":0},"action":"insert","lines":["","    ",""],"id":24}],[{"start":{"row":10,"column":4},"end":{"row":11,"column":22},"action":"insert","lines":["gfs: null,","    mongoose: mongoose"],"id":25}],[{"start":{"row":12,"column":2},"end":{"row":13,"column":0},"action":"insert","lines":["",""],"id":26}],[{"start":{"row":13,"column":0},"end":{"row":14,"column":0},"action":"insert","lines":["",""],"id":27}],[{"start":{"row":14,"column":0},"end":{"row":22,"column":20},"action":"insert","lines":["conn.on('error', function(err) {","    logger.error(\"MongoDB connection error: \" + err.message);","});","conn.once('open', function() {","    logger.info(\"MongoDb is connected\");","    db.gfs = Grid(conn.db, mongoose.mongo);","});","","module.exports = db;"],"id":28}],[{"start":{"row":0,"column":35},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":29}],[{"start":{"row":1,"column":0},"end":{"row":1,"column":1},"action":"insert","lines":["v"],"id":30}],[{"start":{"row":1,"column":1},"end":{"row":1,"column":2},"action":"insert","lines":["a"],"id":31}],[{"start":{"row":1,"column":2},"end":{"row":1,"column":3},"action":"insert","lines":["r"],"id":32}],[{"start":{"row":1,"column":3},"end":{"row":1,"column":4},"action":"insert","lines":[" "],"id":33}],[{"start":{"row":1,"column":4},"end":{"row":1,"column":5},"action":"insert","lines":["l"],"id":34}],[{"start":{"row":1,"column":5},"end":{"row":1,"column":6},"action":"insert","lines":["o"],"id":35}],[{"start":{"row":1,"column":6},"end":{"row":1,"column":7},"action":"insert","lines":["g"],"id":36}],[{"start":{"row":1,"column":7},"end":{"row":1,"column":8},"action":"insert","lines":["g"],"id":37}],[{"start":{"row":1,"column":8},"end":{"row":1,"column":9},"action":"insert","lines":["e"],"id":38}],[{"start":{"row":1,"column":9},"end":{"row":1,"column":10},"action":"insert","lines":["r"],"id":39}],[{"start":{"row":1,"column":10},"end":{"row":1,"column":11},"action":"insert","lines":[" "],"id":40}],[{"start":{"row":1,"column":11},"end":{"row":1,"column":12},"action":"insert","lines":["="],"id":41}],[{"start":{"row":1,"column":12},"end":{"row":1,"column":13},"action":"insert","lines":[" "],"id":42}],[{"start":{"row":1,"column":13},"end":{"row":1,"column":14},"action":"insert","lines":["r"],"id":43}],[{"start":{"row":1,"column":14},"end":{"row":1,"column":15},"action":"insert","lines":["e"],"id":44}],[{"start":{"row":1,"column":15},"end":{"row":1,"column":16},"action":"insert","lines":["q"],"id":45}],[{"start":{"row":1,"column":16},"end":{"row":1,"column":17},"action":"insert","lines":["u"],"id":46}],[{"start":{"row":1,"column":13},"end":{"row":1,"column":17},"action":"remove","lines":["requ"],"id":47},{"start":{"row":1,"column":13},"end":{"row":1,"column":24},"action":"insert","lines":["require(\"\")"]}],[{"start":{"row":1,"column":21},"end":{"row":1,"column":23},"action":"remove","lines":["\"\""],"id":48}],[{"start":{"row":1,"column":21},"end":{"row":1,"column":22},"action":"insert","lines":[";"],"id":49}],[{"start":{"row":1,"column":21},"end":{"row":1,"column":22},"action":"remove","lines":[";"],"id":50}],[{"start":{"row":1,"column":21},"end":{"row":1,"column":23},"action":"insert","lines":["''"],"id":51}],[{"start":{"row":1,"column":22},"end":{"row":1,"column":23},"action":"insert","lines":["c"],"id":52}],[{"start":{"row":1,"column":23},"end":{"row":1,"column":24},"action":"insert","lines":["o"],"id":53}],[{"start":{"row":1,"column":24},"end":{"row":1,"column":25},"action":"insert","lines":["m"],"id":54}],[{"start":{"row":1,"column":25},"end":{"row":1,"column":26},"action":"insert","lines":["m"],"id":55}],[{"start":{"row":1,"column":26},"end":{"row":1,"column":27},"action":"insert","lines":["o"],"id":56}],[{"start":{"row":1,"column":27},"end":{"row":1,"column":28},"action":"insert","lines":["n"],"id":57}],[{"start":{"row":1,"column":22},"end":{"row":1,"column":23},"action":"insert","lines":["."],"id":58}],[{"start":{"row":1,"column":23},"end":{"row":1,"column":24},"action":"insert","lines":["/"],"id":59}],[{"start":{"row":1,"column":23},"end":{"row":1,"column":24},"action":"insert","lines":["."],"id":60}],[{"start":{"row":1,"column":31},"end":{"row":1,"column":32},"action":"insert","lines":["/"],"id":61}],[{"start":{"row":1,"column":32},"end":{"row":1,"column":33},"action":"insert","lines":["l"],"id":62}],[{"start":{"row":1,"column":33},"end":{"row":1,"column":34},"action":"insert","lines":["o"],"id":63}],[{"start":{"row":1,"column":34},"end":{"row":1,"column":35},"action":"insert","lines":["g"],"id":64}],[{"start":{"row":1,"column":35},"end":{"row":1,"column":36},"action":"insert","lines":["g"],"id":65}],[{"start":{"row":1,"column":36},"end":{"row":1,"column":37},"action":"insert","lines":["e"],"id":66}],[{"start":{"row":1,"column":37},"end":{"row":1,"column":38},"action":"insert","lines":["r"],"id":67}],[{"start":{"row":1,"column":40},"end":{"row":1,"column":41},"action":"insert","lines":[";"],"id":68}],[{"start":{"row":3,"column":17},"end":{"row":3,"column":43},"action":"remove","lines":["config.get('mongoose:uri')"],"id":69},{"start":{"row":3,"column":17},"end":{"row":3,"column":80},"action":"insert","lines":["mongodb://nikolayemrikh:789pp369@ds017070.mlab.com:17070/d3jsdb"]}],[{"start":{"row":3,"column":17},"end":{"row":3,"column":27},"action":"remove","lines":["mongodb://"],"id":70}],[{"start":{"row":3,"column":17},"end":{"row":3,"column":18},"action":"insert","lines":["\""],"id":71}],[{"start":{"row":3,"column":71},"end":{"row":3,"column":72},"action":"insert","lines":["\""],"id":72}],[{"start":{"row":3,"column":0},"end":{"row":3,"column":74},"action":"remove","lines":["mongoose.connect(\"nikolayemrikh:789pp369@ds017070.mlab.com:17070/d3jsdb\");"],"id":73},{"start":{"row":3,"column":0},"end":{"row":3,"column":45},"action":"insert","lines":["mongoose.connect(config.get('mongoose:uri'));"]}],[{"start":{"row":2,"column":0},"end":{"row":2,"column":30},"action":"insert","lines":["var config = require('nconf');"],"id":74}],[{"start":{"row":10,"column":10},"end":{"row":11,"column":0},"action":"insert","lines":["",""],"id":75},{"start":{"row":11,"column":0},"end":{"row":11,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":11,"column":4},"end":{"row":192,"column":6},"action":"insert","lines":["profile: {","        auth: {","            local: function(username, password, done) {","                var User = require('./models/user');","                User.findOne({","                    username: username","                }).select(\"+hashedPassword +salt\").exec(function(err, user) {","                    if (err) {","                        return done(err);","                    }","                    if (!user) {","                        return done(null, false, {","                            message: 'Incorrect username.'","                        });","                    }","                    if (!user.isActive()) {","                        return done(null, false, {","                            message: 'User is inactive.'","                        });","                    }","                    if (!user.validPassword(password)) {","                        return done(null, false, {","                            message: 'Incorrect password.'","                        });","                    }","                    return done(null, user);","                });","            },","            openedu: function(prof, done) {","                var userData = {","                    username: prof.username,","                    firstname: prof.firstname,","                    lastname: prof.lastname,","                    email: prof.email,","                    password: null,","                    provider: config.get('auth:openedu:provider') || 'openedu'","                };","                var User = require('./models/user');","                User.findOne({","                    username: userData.username","                }).exec(function(err, data) {","                    if (err) {","                        return done(err);","                    }","                    if (!data) {","                        var user = new User(userData);","                        user.save(function(err, data) {","                            return done(err, data);","                        });","                    }","                    else {","                        if (!data.isActive()) {","                            return done(null, false, {","                                message: 'User is inactive.'","                            });","                        }","                        return done(null, data);","                    }","                });","            },","            vk: function(prof, done) {","                var userData = {","                    username: prof.id,","                    firstname: prof.first_name,","                    lastname: prof.last_name,","                    middlename: null,","                    genderId: null,","                    birthday: null,","                    email: null,","                    password: null,","                    provider: config.get('auth:vk:provider') || 'vk'","                };","                var User = require('./models/user');","                User.findOne({","                    username: userData.username","                }).exec(function(err, data) {","                    if (err) {","                        return done(err);","                    }","                    if (!data) {","                        var user = new User(userData);","                        user.save(function(err, data) {","                            return done(err, data);","                        });","                    }","                    else {","                        if (!data.isActive()) {","                            return done(null, false, {","                                message: 'User is inactive.'","                            });","                        }","                        return done(null, data);","                    }","                });","            },","            ifmosso: function(prof, done) {","                var userData = {","                    username: prof.ssoid,","                    firstname: prof.firstname,","                    lastname: prof.lastname,","                    middlename: prof.middlename,","                    genderId: prof.gender,","                    birthday: prof.birthdate,","                    email: prof.email,","                    password: null,","                    provider: config.get('auth:ifmosso:provider') || 'ifmosso'","                };","                var User = require('./models/user');","                User.findOne({","                    username: userData.username","                }).exec(function(err, data) {","                    if (err) {","                        return done(err);","                    }","                    if (!data) {","                        var user = new User(userData);","                        user.save(function(err, data) {","                            return done(err, data);","                        });","                    }","                    else {","                        if (!data.isActive()) {","                            return done(null, false, {","                                message: 'User is inactive.'","                            });","                        }","                        return done(null, data);","                    }","                });","            }","        },","        log: function(args, callback) {","            var Logger = require('./models/logger');","            var log = new Logger({","                user: args.userId,","                ip: args.ip","            });","            log.save(callback);","        },","        info: function(args, callback) {","            var User = require('./models/user');","            User.findById(args.userId).exec(callback);","        },","        find: function(args, callback) {","            var User = require('./models/user');","            User.findOne({","                username: args.username","            }, callback);","        },","        update: function(args, callback) {","            var User = require('./models/user');","            var attach = args.data.attach || [];","            var attachAdd = [];","            var attachDel = [];","            for (var i = 0; i < attach.length; i++) {","                if (!attach[i].fileId) {","                    attach[i].fileId = mongoose.Types.ObjectId();","                    attachAdd.push(attach[i]);","                }","                else if (attach[i].removed) {","                    attachDel.push(attach[i]);","                    attach.splice(i, 1);","                    i--;","                }","            }","            User.findByIdAndUpdate(args.userId, {","                '$set': args.data","            }, {","                'new': true","            }, function(err, data) {","                callback(err, data);","                if (!err && data) {","                    if (attachAdd.length > 0) {","                        db.storage.upload(attachAdd);","                    }","                    if (attachDel.length > 0) {","                        db.storage.remove(attachDel);","                    }","                }","            });","        }","    },"],"id":76}],[{"start":{"row":105,"column":14},"end":{"row":140,"column":13},"action":"remove","lines":["","            ifmosso: function(prof, done) {","                var userData = {","                    username: prof.ssoid,","                    firstname: prof.firstname,","                    lastname: prof.lastname,","                    middlename: prof.middlename,","                    genderId: prof.gender,","                    birthday: prof.birthdate,","                    email: prof.email,","                    password: null,","                    provider: config.get('auth:ifmosso:provider') || 'ifmosso'","                };","                var User = require('./models/user');","                User.findOne({","                    username: userData.username","                }).exec(function(err, data) {","                    if (err) {","                        return done(err);","                    }","                    if (!data) {","                        var user = new User(userData);","                        user.save(function(err, data) {","                            return done(err, data);","                        });","                    }","                    else {","                        if (!data.isActive()) {","                            return done(null, false, {","                                message: 'User is inactive.'","                            });","                        }","                        return done(null, data);","                    }","                });","            }"],"id":77}],[{"start":{"row":105,"column":13},"end":{"row":105,"column":14},"action":"remove","lines":[","],"id":78}],[{"start":{"row":38,"column":14},"end":{"row":70,"column":14},"action":"remove","lines":["","            openedu: function(prof, done) {","                var userData = {","                    username: prof.username,","                    firstname: prof.firstname,","                    lastname: prof.lastname,","                    email: prof.email,","                    password: null,","                    provider: config.get('auth:openedu:provider') || 'openedu'","                };","                var User = require('./models/user');","                User.findOne({","                    username: userData.username","                }).exec(function(err, data) {","                    if (err) {","                        return done(err);","                    }","                    if (!data) {","                        var user = new User(userData);","                        user.save(function(err, data) {","                            return done(err, data);","                        });","                    }","                    else {","                        if (!data.isActive()) {","                            return done(null, false, {","                                message: 'User is inactive.'","                            });","                        }","                        return done(null, data);","                    }","                });","            },"],"id":79}]]},"ace":{"folds":[],"scrolltop":1309,"scrollleft":0,"selection":{"start":{"row":38,"column":14},"end":{"row":38,"column":14},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":39,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1486245338729,"hash":"4d405678ea20fb6ada647f0794fb58a1632bc1eb"}